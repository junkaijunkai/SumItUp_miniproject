package Task1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

/**
 * The Task1 class creates a graphical user interface for the “Sum It Up” game.
 * The interface consists of a JFrame that contains a north label, a panel, and a button.
 * This class includes methods that design and implement the graphical elements of the interface.
 * The elements include a plus sign, two side panels with randomly generated numbers, and a check button.
 * Users can enter two operands in text fields and click the check button to guess the sum of the operands.
 * If the user provides the correct answer, the game generates a new set of random numbers.
 * @author KevZ.803
 */
public class task1 {

    private int number1=0;
    private int number2=0;
    /**
     * The main method creates an instance of the Task1 class and calls the createWindow method.
     * @param args an array of Strings which contains command-line arguments.
     */
    public static void main(String[] args) {

        task1 window=new task1();
        window.createWindow();
    }
    /**
     * The createWindow method creates and displays the graphical user interface for the "Sum It Up" game.
     * The method creates a JFrame, a JPanel, and a JLabel, and adds these elements to the frame.
     * The method also sets up the side panels, generates random numbers for these panels,
     * and sets up the check button with its action listener.
     */
    public void createWindow(){
        // create the frame
        JFrame myFrame=new JFrame("Welcome to Sum It Up!");
        myFrame.setSize(800,650);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JPanel panel = new JPanel(new BorderLayout());

        // design the northern layout
        JLabel northLabel=new JLabel();
        northLabel.setHorizontalAlignment(SwingConstants.CENTER);
        northLabel.setText("Enter Two Operands and click 'Check!'");
        // add the lines to the frame
        myFrame.add(northLabel,BorderLayout.NORTH);

        setPlus(panel);

        // design the side layouts
        number1=setRabbitLeft(panel);
        number2=setRabbitRight(panel);
        System.out.println(number1+" "+number2);



        // design the function of the button
        recurrence(myFrame,panel,northLabel);

        myFrame.add(panel);
        myFrame.setVisible(true);
    }
    /**
     * The recurrence method creates a check button with an associated action listener.
     * The action listener checks the user's input against the sum of the random numbers generated for the left and right panels.
     * If the user is correct, the method generates new random numbers and refreshes the panels.
     * @param myFrame the JFrame that contains the "Sum It Up" game.
     * @param panel the JPanel that contains the rabbits and plus sign.
     * @param northLabel the JLabel that displays the message to the user.
     */
   public void recurrence(JFrame myFrame,JPanel panel,JLabel northLabel)
   {
       //System.out.println("go!"+" "+number1+" "+number2);

       // design the southern layout
       JTextField textField1=new JTextField(10);
       JLabel plusLabel=new JLabel("+");
       JTextField textField2=new JTextField(10);
       JLabel equalsLabel=new JLabel("=");
       JTextField textField3=new JTextField(10);
       JButton button=new JButton("Check!");

       // add components to the southern panel
       JPanel southPanel=new JPanel();
       southPanel.add(textField1);
       southPanel.add(plusLabel);
       southPanel.add(textField2);
       southPanel.add(equalsLabel);
       southPanel.add(textField3);
       southPanel.add(button);
       // add the southern panel to the frame
       myFrame.add(southPanel,BorderLayout.SOUTH);

       /**

        * Adds an ActionListener to the button object, which listens for an action event, such as a button press. The actionPerformed method is called when the event fires, executing a block of logic that retrieves the user input values from text fields, evaluates whether they are correct, and updates the GUI accordingly.

        * @param e anActionEvent object that represents the event generated by the button
        */
       button.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
               {
                   // get the inputs from the keyboard
                   String input1 = textField1.getText();
                   String input2 = textField2.getText();
                   String input3 = textField3.getText();
                   if((input1 != null||input1.length()!=0)&&(input2 != null||input2.length()!=0)&&(input1 != null||input1.length()!=0))
                   {
                       // cast the data type of the inputs to int
                       int num1=Integer.parseInt(input1);
                       int num2=Integer.parseInt(input2);
                       int num3=Integer.parseInt(input3);
                       if(num1==number1 && num2==number2 && num3==number1+number2){
                           northLabel.setText("Correct! Have another go?");

                           // clear the text fields
                           textField1.setText("");
                           textField2.setText("");
                           textField3.setText("");

                           // refresh the page
                           refreshRabbits(panel);
                           setPlus(panel);

                           //System.out.println(number1+" "+number2);

                           // generate new number of rabbits randomly
                           number1 = setRabbitLeft(panel);
                           number2 = setRabbitRight(panel);
                           System.out.println(number1+" "+number2);

                           recurrence(myFrame,panel,northLabel);

                       } else{
                           northLabel.setText("Wrong! Try again!");

                       }
                   }
               }

           }
       });

   }


    /**
     * Adds a plus sign image to the center of a specified JPanel using the BorderLayout.
     * @param panel the JPanel to add the plus sign image to
     */
   public void setPlus(JPanel panel){
        // create an icon for the image
        ImageIcon plusIcon =new ImageIcon("img/plus.png");
        JLabel iconLabel=new JLabel(plusIcon);
        // set the icon on the label
        panel.add(BorderLayout.CENTER,iconLabel);
    }

    /**
     * Sets an array of rabbits on a panel on the left side of the component.
     * @param panel the JPanel on which the rabbits will be set.
     * @return int the number of rabbits generated randomly.
     */
    public int setRabbitLeft(JPanel panel) {
        int x=0,y=0;
        // create a panel for rabbits on the left
        JPanel panelRabbit = new JPanel();
        panelRabbit.setPreferredSize(new Dimension(72*3,Integer.MAX_VALUE));
        panelRabbit.setLayout(null);
        // generate random number of rabbits
        Random ran = new Random();
        int value = ran.nextInt(10)+1;
        // create an array for the rabbits
        ImageIcon rabbit = new ImageIcon("img/rabbit.jpg");
        JLabel[] array = new JLabel[value];
        for(int i=0;i<value;i++)
        {
            array[i]= new JLabel(rabbit);
            x = 72*(i%3);
            y = 112*(i/3);
            array[i].setBounds(x,y,72,112);
            panelRabbit.add(array[i]);
        }

        panel.add(BorderLayout.WEST,panelRabbit);
        return value;
    }

    /**
     * Sets an array of rabbits on a panel on the right side of the component.
     * @param panel the JPanel on which the rabbits will be set.
     * @return int the number of rabbits generated randomly.
     */
    public int setRabbitRight(JPanel panel) {
        int x=0,y=0;
        // create a panel for rabbits on the right
        JPanel panelRabbit = new JPanel();
        panelRabbit.setPreferredSize(new Dimension(72*3,Integer.MAX_VALUE));
        panelRabbit.setLayout(null);
        // generate random number of rabbits
        Random ran = new Random();
        int value = ran.nextInt(10)+1;
        // create an array for the rabbits
        ImageIcon rabbit = new ImageIcon("img/rabbit.jpg");
        ArrayList<JLabel> rabbitList = new ArrayList<>();
        JLabel[] array = new JLabel[value];
        for(int i=0;i<value;i++)
        {
            array[i]= new JLabel(rabbit);
            x = 72*(i%3);
            y = 112*(i/3);
            array[i].setBounds(x,y,72,112);
            panelRabbit.add(array[i]);
        }

        panel.add(BorderLayout.EAST,panelRabbit);

        return value;
    }

    /**
     * Removes all components from a JPanel and then refreshes the panel.
     * @param panel the JPanel to be refreshed.
     */
    public void refreshRabbits(JPanel panel){
        // remove all methods on "panel"
        panel.removeAll();
        // refresh the page
        panel.revalidate();
        panel.updateUI();
    }
}
